suppressMessages(data.frame(content(scraped)))
})
names(stocksdf) <- stocklist
return(stocksdf)
}
AMEX <- stockhistoricals("AMEX", start_date = "2016-09-10")
names(AMEX)
sapply(names(AMEX), function(X){AMEX$x$Low})
AMEX[[1]]
AMEX[[1]][[1]]
AMEX[[1]][[2]]
AMEX[[1]][[3]]
AMEX[[1]][[4]]
AMEX[[1]][[5]]
AMEX[[1]]
AMEX[[1]][[6]]
sapply(names(AMEX), function(X){AMEX[[x]][[6]]})
sapply(names(AMEX), function(x){AMEX[[x]][[6]]})
sapply(1:length(AMEX), function(x){AMEX[[x]][[6]]})
length(AMEX)
sapply(1:length(AMEX), function(x){AMEX[[x]][[5]]})
lapply(1:length(AMEX), function(x){AMEX[[x]][[5]]})
sapply(AMEX, '[[',2)
sapply(AMEX, '[[',1)
sapply(AMEX, '[[',2)
sapply(AMEX, '[[',3)
sapply(AMEX, '[[',4)
sapply(AMEX, '[[',5)
sapply(AMEX, '[[',6)
sapply(AMEX, '[[',1)
AMEX$FAX$Low
sapply(AMEX, '[',1)
sapply(AMEX, '[',2)
sapply(AMEX, '[',3)
sapply(AMEX, '[[',3)
non.null.list <- lapply(AMEX, Filter, f = Negate(is.null))
AMEX$`ABE           `
AMEX$ABE
help(Negate)
length(AMEX$ABE)
length(AMEX$ACU)
AMEX[lapply(AMEX,length)<7]
AMEX[lapply(AMEX,length)==7]
AMEXfilt <- AMEX[lapply(AMEX,length)==7]
sapply(AMEXfilt, '[[',6)
AdjClose <- sapply(AMEXfilt, '[[',6)
AdjClose <- data.frame(sapply(AMEXfilt, '[[',6))
df <- data.frame()
AdjClose <- lapply(AMEXfilt, function(i){
close <- AMEXfilt[[i]][[6]]
df<- rbind(df, close)
df
})
AdjClose <- lapply(1:length(AMEXfilt), function(i){
close <- AMEXfilt[[i]][[6]]
df<- rbind(df, close)
df
})
AdjClose <- lapply(1:length(AMEXfilt), function(i){
close <- AMEXfilt[[i]][[6]]
df<- cbind(df, close)
df
})
do.call()
help(do.call)
AdjClose <- lapply(1:length(AMEXfilt), function(i){
close <- AMEXfilt[[i]][[6]]
df<- do.call(rbind, close)
df
})
df<- do.call(rbind, AdjClose)
df<- do.call(cbind, AdjClose)
View(df)
AdjClose <- sapply(AMEXfilt, '[[',6)
df<- do.call(cbind, AdjClose)
View(df)
df<- do.call(rbind, AdjClose)
View(df)
get_stocklists <- function(exchange="NYSE"){
if(exchange=="NASDAQ"){
read.csv(file="http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nasdaq&render=download")
} else if (exchange == "NYSE"){
read.csv(file="http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nyse&render=download")
} else if (exchange == "AMEX"){
read.csv(file="http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=amex&render=download")
} else {
message("ERROR: a valid exchange wasn't specified.")
message("Try 'NYSE', 'NASDQ', or 'AMEX'")
message("usage: get_stocklists(exchange)")
}
}
get_stocklists()
get_stocklists("Huffpo")
get_stocklists <- function(exchange="NYSE"){
if(exchange=="NASDAQ"){
read.csv(file="http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nasdaq&render=download")
} else if (exchange == "NYSE"){
read.csv(file="http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nyse&render=download")
} else if (exchange == "AMEX"){
read.csv(file="http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=amex&render=download")
} else {
message("ERROR: a valid exchange wasn't specified.")
message("Try 'NYSE', 'NASDQ', or 'AMEX'")
message("usage: get_stocklists(exchange)")
}
}
stockhistoricals <- function(stocklist="GOOG", start_date="1970-01-01", end_date=as.Date(Sys.time()), verbose=TRUE){
## Usage stockhistoricals(stocklist, start_date, end_date, verbose=TRUE)
##    stocklist : A vector of stock tickers. Default = GOOG. Can also pass "NYSE", "NASDAQ", or "AMEX" to get those lists.
##    start_date : start date in format Year-month-day. Default = "1970-01-01"
##    end_date : end date in format Year-month-day. Default = system date
##    verbost : Logical. if F, suppresses messages
require(XML)
require(RCurl)
require(httr)
require(readr)
options(warn=-1)
if(stocklist=="NASDAQ" | stocklist=="NYSE" | stocklist=="AMEX"){
stocks <- get_stocklists(stocklist)
stocks <- stocks$Symbol
}
options(warn=0)
#86400 is the conversion from days to minutes (how yahoo is counting time)
#t=1 is 1970-01-01. So any is 86400 minutes per day from 1970-01-01
start <- as.numeric(as.Date(start_date)-as.Date("1970-01-01"))* 86400
end <- as.numeric(as.Date(end_date)-as.Date("1970-01-01"))* 86400
#grab a cookie. Try 5 times because sometimes yahoo puts fucking escape characters in the crumb
tries = 1
status = 1
while (tries < 5 && status !=200){
url <- paste0("https://finance.yahoo.com/quote/GOOG/history")
h <- handle(url)
res <- GET(handle = h)
response <- content(res, "text")
cookie <- unlist(strsplit(unlist(res$headers[5]),';'))[1]
#this gets a crumb pair to use. I hate regex
crumbled = stringr::str_extract(response, '\"CrumbStore\\\":\\{\\\"crumb\\\":\\\"[[:graph:]]+?\\\"\\}')
crumb <- unlist(strsplit(crumbled,split='"'))[6]
#test them
testurl <- paste0("https://query1.finance.yahoo.com/v7/finance/download/GOOG?period1=1451606400&period2=1483228800&interval=1d&events=history&crumb=",crumb)
scraped <- GET(testurl, config(cookie= cookie))
status <- status_code(scraped)
tries = tries + 1
}
if (status != 200){
message("ERROR: Couldn't access Yahoo after 5 tries")
}
if (status == 401){
message("ERROR: The cookie/crumb scrape didn't work... Fucking yahoo...")
}
if (verbose == TRUE){
message("Grabbing Stock data... This takes a while for long stocklists")
}
stocksdf<- lapply(stocklist,function(x){
if (verbose == TRUE){
message(paste0("Downloading ",x))
}
capture <- paste0("https://query1.finance.yahoo.com/v7/finance/download/",x,"?period1=",start,"&period2=",end,"&interval=1d&events=history&crumb=",crumb)
scraped <- GET(capture, config(cookie= cookie))
#the content() call is loud so I suppress messages for now
suppressMessages(data.frame(content(scraped)))
})
names(stocksdf) <- stocklist
return(stocksdf)
}
AMEX <- stockhistoricals("AMEX", start_date = "2016-09-10")
stockhistoricals <- function(stocklist="GOOG", start_date="1970-01-01", end_date=as.Date(Sys.time()), verbose=TRUE){
## Usage stockhistoricals(stocklist, start_date, end_date, verbose=TRUE)
##    stocklist : A vector of stock tickers. Default = GOOG. Can also pass "NYSE", "NASDAQ", or "AMEX" to get those lists.
##    start_date : start date in format Year-month-day. Default = "1970-01-01"
##    end_date : end date in format Year-month-day. Default = system date
##    verbost : Logical. if F, suppresses messages
require(XML)
require(RCurl)
require(httr)
require(readr)
options(warn=-1)
if(stocklist=="NASDAQ" | stocklist=="NYSE" | stocklist=="AMEX"){
stocklist <- get_stocklists(stocklist)
stocklist <- stocklist$Symbol
}
options(warn=0)
#86400 is the conversion from days to minutes (how yahoo is counting time)
#t=1 is 1970-01-01. So any is 86400 minutes per day from 1970-01-01
start <- as.numeric(as.Date(start_date)-as.Date("1970-01-01"))* 86400
end <- as.numeric(as.Date(end_date)-as.Date("1970-01-01"))* 86400
#grab a cookie. Try 5 times because sometimes yahoo puts fucking escape characters in the crumb
tries = 1
status = 1
while (tries < 5 && status !=200){
url <- paste0("https://finance.yahoo.com/quote/GOOG/history")
h <- handle(url)
res <- GET(handle = h)
response <- content(res, "text")
cookie <- unlist(strsplit(unlist(res$headers[5]),';'))[1]
#this gets a crumb pair to use. I hate regex
crumbled = stringr::str_extract(response, '\"CrumbStore\\\":\\{\\\"crumb\\\":\\\"[[:graph:]]+?\\\"\\}')
crumb <- unlist(strsplit(crumbled,split='"'))[6]
#test them
testurl <- paste0("https://query1.finance.yahoo.com/v7/finance/download/GOOG?period1=1451606400&period2=1483228800&interval=1d&events=history&crumb=",crumb)
scraped <- GET(testurl, config(cookie= cookie))
status <- status_code(scraped)
tries = tries + 1
}
if (status != 200){
message("ERROR: Couldn't access Yahoo after 5 tries")
}
if (status == 401){
message("ERROR: The cookie/crumb scrape didn't work... Fucking yahoo...")
}
if (verbose == TRUE){
message("Grabbing Stock data... This takes a while for long stocklists")
}
stocksdf<- lapply(stocklist,function(x){
if (verbose == TRUE){
message(paste0("Downloading ",x))
}
capture <- paste0("https://query1.finance.yahoo.com/v7/finance/download/",x,"?period1=",start,"&period2=",end,"&interval=1d&events=history&crumb=",crumb)
scraped <- GET(capture, config(cookie= cookie))
#the content() call is loud so I suppress messages for now
suppressMessages(data.frame(content(scraped)))
})
names(stocksdf) <- stocklist
return(stocksdf)
}
AMEX <- stockhistoricals("AMEX", start_date = "2016-09-10")
source("https://raw.githubusercontent.com/ScientistJake/StockScraper.R/master/StockScraper.R")
help("stop")
AMEX <- stockhistoricals("AMEX", start_date = "2016-09-10")
AMEXfilt <- AMEX[lapply(AMEX,length)==7]
AMEX[lapply(AMEX,length)!=7]
AMEX_symbols <-get_stocklists("AMEX")
View(AMEX_symbols)
AMEX_symbols[5]
AMEX_symbols[5,]
AMEX_symbols$Symbol[5,]
AMEX_symbols$Symbol[5]
library(quantmod)
getSymbols("NSPR.WS", verbose=T,src="yahoo")
stockhistoricals("NSPR.WS", start_date = "2016-09-10")
stockhistoricals("NSPR.WS", start_date = "2016-09-10")
stockhistoricals("NSPR-WS", start_date = "2016-09-10")
shiny::runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
shiny::runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
shiny::runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
runApp('Documents/Github_repos/Shiny_F1')
setwd("~/Documents/Github_repos/Shiny_F1")
library(RCurl)
library(httr)
library(XML)
library(shiny)
library(ggplot2)
library(emoGG)
library(jsonlite)
library(reshape)
library(RSQLite)
library(dplyr)
library(tidyr)
source('heatmap.2.R')
library(emoGG)
con = dbConnect(RSQLite::SQLite(), dbname="ergast.sqlite")
drivers <- dbGetQuery(con, "SELECT * FROM drivers")
races <- dbGetQuery(con, "SELECT * FROM races")
status <- dbGetQuery(con, "SELECT * FROM status")
constructors <- dbGetQuery(con, "SELECT constructorId, constructorRef, name, url FROM constructors") #%>%
colnames(constructors) <- c("constructorId","constructorRef","constructorName","constructorUrl")
circuits <- dbGetQuery(con, "SELECT circuitId, name, location, country, url FROM circuits")
colnames(circuits) <- c("circuitId","circuitName","circuitLocation","circuitCountry","circuitUrl")
Currentdrivers <- fromJSON("http://ergast.com/api/f1/2017/drivers/.json?limit=2500")
parseCurrdrivers= data.frame(name=character())
Currdriversresults <- lapply(1:as.numeric(Currentdrivers[[1]][6][1]), function(i){
id <- Currentdrivers[[1]][[7]][[3]][[1]][i]
firstname <- Currentdrivers[[1]][[7]][[3]][[5]][i]
lastname <- toupper(Currentdrivers[[1]][[7]][[3]][[6]][i])
parseCurrdrivers=rbind(parseCurrdrivers,data.frame(
paste0(lastname,", ",firstname),
id)
)
names(parseCurrdrivers) = NULL
parseCurrdrivers
})
CurrDrivers <- unlist(lapply(Currdriversresults, '[[', 1))
View(races)
lapTimes <- dbGetQuery(con, paste0("SELECT * FROM lapTimes where ((raceId = ",paste(as.numeric(988),sep=""),"))"))
laptimes_drivers <- merge(lapTimes,drivers, by.x='driverId',by.y='driverId')
laptimes_drivers
View(races)
paste0("SELECT * FROM lapTimes where ((raceId = ",paste(as.numeric(988),sep=""),"))")
lapTimes <- dbGetQuery(con, paste0("SELECT * FROM lapTimes where ((raceId = ",paste(as.numeric(985),sep=""),"))"))
laptimes_drivers <- merge(lapTimes,drivers, by.x='driverId',by.y='driverId')
laptimes_drivers
View(laptimes_drivers)
View(drivers)
View(laptimes_drivers)
as.factor(laptimes_drivers$driverRef)
levels(as.factor(laptimes_drivers$driverRef))
results <- dbGetQuery(con, paste0("SELECT * FROM results where ((driverId = ",paste(as.numeric(1),sep=""),"))"))
View(results)
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(1),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
View(racedriver_constructor)
View(constructors)
View(constructors)
left_join(constructors)
left_join(racedriver_constructor,constructors)
racedrivers <- levels(as.factor(laptimes_drivers$driverRef))
help(sapply)
sapply(racedrivers, function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
racedriver_constructor
})
sapply(racedrivers, function(x){
print(x)
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
racedriver_constructor
})
View(laptimes_drivers)
racedrivers <- levels(as.factor(laptimes_drivers$driverId))
sapply(racedrivers, function(x){
print(x)
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
racedriver_constructor
})
out <- sapply(racedrivers, function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
racedriver_constructor
})
out
out <- sapply(racedrivers, function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
})
out
out <- sapply(racedrivers, function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
})
do.call(cbind,out)
out <- do.call(cbind,out)
View(out)
out <- sapply(racedrivers, function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
})
out <- do.call(rbind,out)
View(out)
View(results)
out <- sapply(racedrivers, function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT driverId, constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
})
out <- do.call(rbind,out)
View(out)
x=1
racedriver_constructor <- dbGetQuery(con, paste0("SELECT driverId, constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
View(racedriver_constructor)
out <- lapply(racedrivers, function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT driverId, constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
})
out <- do.call(rbind,out)
View(out)
racedriver_constructor <- left_join(out,constructors)
View(out)
View(racedriver_constructor)
racedriver_constructor <- levels(as.factor(laptimes_drivers$driverId)) %>%
lapply(., function(x){
racedriver_constructor <- dbGetQuery(con, paste0("SELECT driverId, constructorId FROM results where ((driverId = ",paste(as.numeric(x),sep=""),")) AND ((raceId = ",paste(as.numeric(985),sep=""),"))"))
}) %>%
do.call(rbind,.) %>%
left_join(.,constructors)
View(racedriver_constructor)
laptimes_driversTEST <- left_join(laptimes_drivers,racedriver_constructor)
View(laptimes_driversTEST)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(laptimes_driversTEST)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
interaction(laptimes_driversTEST$constructorName, laptimes_driversTEST$code)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
laptimes_driversTEST[which.max(laptimes_driversTEST$lap)]
laptimes_driversTEST[which.max(laptimes_driversTEST$lap),]
laptimes_driversTEST$position[which.max(laptimes_driversTEST$lap)]
laptimes_driversTEST$position[which.max(laptimes_driversTEST$lap),]
laptimes_driversTEST$position[which(laptimes_driversTEST$lap==max(laptimes_driversTEST$lap),]
laptimes_driversTEST$position[which(laptimes_driversTEST$lap==max(laptimes_driversTEST$lap)]
which(laptimes_driversTEST$lap==max(laptimes_driversTEST$lap)
laptimes_driversTEST$position[which(laptimes_driversTEST$lap==max(laptimes_driversTEST$lap))]
laptimes_driversTEST$position[which(laptimes_driversTEST$lap==max(laptimes_driversTEST$lap))]
laptimes_driversTEST$position[which(laptimes_driversTEST$lap==max(laptimes_driversTEST$lap)),]
laptimes_driversTEST$position[which(laptimes_driversTEST$lap==max(laptimes_driversTEST$lap))]
install.packages('directlabels')
library(directlabels)
help("geom_dl")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
con = dbConnect(RSQLite::SQLite(), dbname="ergast.sqlite")
drivers <- dbGetQuery(con, "SELECT * FROM drivers")
races <- dbGetQuery(con, "SELECT * FROM races")
status <- dbGetQuery(con, "SELECT * FROM status")
constructors <- dbGetQuery(con, "SELECT constructorId, constructorRef, name, url FROM constructors") #%>%
colnames(constructors) <- c("constructorId","constructorRef","constructorName","constructorUrl")
circuits <- dbGetQuery(con, "SELECT circuitId, name, location, country, url FROM circuits")
colnames(circuits) <- c("circuitId","circuitName","circuitLocation","circuitCountry","circuitUrl")
View(drivers)
dbListTables(con)
driverStandings <- dbGetQuery(con, "SELECT * FROM driverStandings")
View(driverStandings)
View(driverStandings)
runApp()
runApp()
install.packages('shinyjs')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/Github_repos/Untitled.R')
runApp()
runApp()
runApp()
help(navbarPage)
runApp()
runApp()
runApp()
runApp('Untitled.R')
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
